/**
 * Copyright (c) 2025 Zack Puhl (@NotsoanoNimus) - https://github.com/NotsoanoNimus/chacha20_aead.c3l
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// ===========================================================================================================
/* THIS SOURCE CODE HAS BEEN SLIGHTLY MODIFIED FROM ITS ORIGINAL STATE FOR COMPATIBILITY WITH THIS PROJECT. */
// ===========================================================================================================
module mftah::crypto::chacha20;

import mftah::util;


const BLOCK_SIZE = 64;
const KEY_SIZE = 32;
const IV_SIZE = 12;

const char[] MAGIC = "expand 32-byte k";


struct ChaCha20 (CryptoProvider)
{
    uint[16] key_stream;
    usz position;

    char[32] key;
    char[12] nonce;
    ulong counter;

    uint[16] state;
}


fn void? ChaCha20.iface_init(&self, char[] key, char[] iv) @dynamic
	=> (void)self.init(key, iv, 1);

fn char[]? ChaCha20.encrypt_mut(&self, char[] input) @dynamic
{
	self.xor(input);

	return input;
}

fn char[]? ChaCha20.decrypt_mut(&self, char[] input) @dynamic
{
	self.xor(input);

	return input;
}

// ChaCha20 doesn't need padding since it's not a block cipher.
fn char[]? ChaCha20.pad(&self, char[] input) @dynamic => input;
fn char[]? ChaCha20.unpad(&self, char[] input) @dynamic => input;

fn usz ChaCha20.block_size(&self) @dynamic => BLOCK_SIZE;
fn usz ChaCha20.iv_size(&self) @dynamic => IV_SIZE;


faultdef
	OUT_OF_RESOURCES, INVALID_KEY_SIZE, INVALID_IV_SIZE, INVALID_BUFFER_SIZE;


macro uint rot(uint x, int n) @local => (x << n) | (x >> (32 - n));

macro uint pack4(char* a) @local
{
    uint res = 0;
	res |= (uint)a[0] << 0 * 8;
	res |= (uint)a[1] << 1 * 8;
	res |= (uint)a[2] << 2 * 8;
	res |= (uint)a[3] << 3 * 8;
	return res;
}

fn void quarter_round(uint* x, int a, int b, int c, int d) @local @inline
{
    x[a] += x[b]; x[d] = rot(x[d] ^ x[a], 16);
    x[c] += x[d]; x[b] = rot(x[b] ^ x[c], 12);
    x[a] += x[b]; x[d] = rot(x[d] ^ x[a], 8);
    x[c] += x[d]; x[b] = rot(x[b] ^ x[c], 7);
}


fn void ChaCha20.next_block(&self) @local
{
    int i;

    for (i = 0; i < 16; ++i) self.key_stream[i] = self.state[i];

    for (i = 0; i < 10; ++i) 
	{
		quarter_round(&self.key_stream[0],   0,  4,  8, 12);
		quarter_round(&self.key_stream[0],   1,  5,  9, 13);
		quarter_round(&self.key_stream[0],   2,  6, 10, 14);
		quarter_round(&self.key_stream[0],   3,  7, 11, 15);
		quarter_round(&self.key_stream[0],   0,  5, 10, 15);
		quarter_round(&self.key_stream[0],   1,  6, 11, 12);
		quarter_round(&self.key_stream[0],   2,  7,  8, 13);
		quarter_round(&self.key_stream[0],   3,  4,  9, 14);
	}

	for (i = 0; i < 16; ++i) self.key_stream[i] += self.state[i];

	uint* counter = &self.state[12];
	counter[0]++;

	if (!counter[0]) counter[1]++;
}

fn void ChaCha20.init(&self, char[] key, char[] nonce, ulong counter)
{
    // Init block.
    for (int i = 0; i < 32; ++i) self.key[i] = key[i];
    for (int i = 0; i < 12; ++i) self.nonce[i] = nonce[i];

	self.state[0]  = pack4(&MAGIC[0 * 4]);
	self.state[1]  = pack4(&MAGIC[1 * 4]);
	self.state[2]  = pack4(&MAGIC[2 * 4]);
	self.state[3]  = pack4(&MAGIC[3 * 4]);
	self.state[4]  = pack4(&key[0 * 4]);
	self.state[5]  = pack4(&key[1 * 4]);
	self.state[6]  = pack4(&key[2 * 4]);
	self.state[7]  = pack4(&key[3 * 4]);
	self.state[8]  = pack4(&key[4 * 4]);
	self.state[9]  = pack4(&key[5 * 4]);
	self.state[10] = pack4(&key[6 * 4]);
	self.state[11] = pack4(&key[7 * 4]);
	self.state[12] = (uint)counter;
	self.state[13] = pack4(&nonce[0 * 4]) + (uint)(counter >> 32);
	self.state[14] = pack4(&nonce[1 * 4]);
	self.state[15] = pack4(&nonce[2 * 4]);

    self.counter = counter;
    self.position = 64;
}


fn void ChaCha20.xor(&self, char[] data)
{
    char* keystream8 = (char*)(&self.key_stream[0]);
    usz len = data.len;

	for (usz i = 0; i < len; ++i) 
	{
		if (self.position >= 64) 
		{
			self.next_block();
			self.position = 0;
		}
		data[i] ^= keystream8[self.position];
		self.position++;
	}
}


fn void? transform_data(char[] data, char[] key, char[] iv, uint counter) @local
{
	switch {
		case 0 == data.len: return;
		case 12 != iv.len: return INVALID_IV_SIZE?;
		case 32 != key.len: return INVALID_KEY_SIZE?;
	}

	ChaCha20 c @noinit;
	c.init(key, iv, counter);
	c.xor(data);
}

fn void? encrypt_mut(char[] data, char[] key, char[] iv, uint counter = 1) => transform_data(data, key, iv, counter);
fn void? decrypt_mut(char[] data, char[] key, char[] iv, uint counter = 1) => transform_data(data, key, iv, counter);


// Cloning transformed data requires the allocation of a new buffer of equal or greater size. We don't want a STDLIB dependency here.
alias FnHeapAllocate = fn void*(usz);

fn char[]? transform_clone(char[] data, char[] key, char[] iv, FnHeapAllocate allocator_func, uint counter = 1) @local
{
	if (!data.len) return {};

	void* pool = allocator_func(data.len);
	if (null == pool) return OUT_OF_RESOURCES?;

	for (usz i = 0; i < data.len; ++i) ((char*)pool)[i] = data[i];   // poor man's [unoptimized] memcpy
	char[] pool_data = ((char*)pool)[:data.len];

	if (catch err = transform_data(pool_data, key, iv, counter)) return err?;

	return pool_data;
}

fn char[]? encrypt_clone(char[] data, char[] key, char[] iv, FnHeapAllocate allocator_func, uint counter = 1)
	=> transform_clone(data, key, iv, allocator_func, counter);

fn char[]? decrypt_clone(char[] data, char[] key, char[] iv, FnHeapAllocate allocator_func, uint counter = 1)
	=> transform_clone(data, key, iv, allocator_func, counter);


fn void? encrypt_into(char[] data, char[] into, char[] key, char[] iv, uint counter = 1)
{
	if (into.len < data.len) return INVALID_BUFFER_SIZE?;
	for (usz i = 0; i < data.len; ++i) into[i] = data[i];   // poor man's [unoptimized] memcpy

	return transform_data(into, key, iv, counter);
}

fn void? decrypt_into(char[] data, char[] into, char[] key, char[] iv, uint counter = 1)
{
	if (into.len < data.len) return INVALID_BUFFER_SIZE?;
	for (usz i = 0; i < data.len; ++i) into[i] = data[i];   // poor man's [unoptimized] memcpy

	return transform_data(into, key, iv, counter);
}



// -----------------------------------------------------------------------------------
// TESTS
import std::core::test;

import libc;


fn void test__encrypt_clone() @test
{
    // Test values. Note that the key is exactly 256 bits and the IV is exactly 12 bytes.
	char[] key = "this is a test key for chacha20.";
	char[] iv = "1234567890ab";

    // Need to copy this string into a buffer that's R/W. Trying to modify this buffer in-place is a recipe for disaster.
    char[] constant =
        "this is a stream of data which should be encrypted with chacha20."
        " It's not authenticated yet, but it works to hide valuable data cost-effectively.";

    char[] data = encrypt_clone(constant, key, iv, &libc::malloc)!!;

    test::@check(data.ptr != constant.ptr, "The cloned buffer's pointer should NOT equal the const buffer's pointer.");
    test::@check(data.len == constant.len, "`encrypt_clone` should only encrypt and clone the exact length of the const string buffer (got '%s'; expected '%s').", data.len, constant.len);
	test::@check(data == ((char[*]){ 0x38, 0xFD, 0x77, 0x63, 0x06, 0x79, 0x06, 0xF6, 0x44, 0x50, 0x9F, 0xE8, 0x7F, 0x2E, 0xFC, 0x91, 0x68, 0xA9, 0x23, 0x44, 0xDC, 0x33, 0x72, 0x0F, 0x07, 0x97, 0x18, 0x1B, 0x1B, 0x01, 0xE9, 0x35, 0xB9, 0x0C, 0x23, 0x09, 0x68, 0x18, 0x76, 0x80, 0xF7, 0xB5, 0xE1, 0x49, 0x6B, 0x67, 0x56, 0x55, 0xEE, 0x29, 0x3F, 0x62, 0xF7, 0xCC, 0xEE, 0xAA, 0x4D, 0xC7, 0x10, 0x64, 0x9F, 0xAB, 0x06, 0x6E, 0xF4, 0x89, 0x44, 0xF1, 0x37, 0x9E, 0x03, 0x65, 0xCF, 0x41, 0x32, 0x51, 0x2B, 0x53, 0x7B, 0xBB, 0x04, 0x70, 0x4B, 0x40, 0x8B, 0x82, 0xF9, 0xBF, 0xCE, 0xE5, 0x5E, 0xF0, 0x0C, 0x68, 0x90, 0xA3, 0x54, 0x79, 0xD3, 0xF8, 0x3E, 0x79, 0xB8, 0x27, 0x4A, 0x8E, 0x21, 0x74, 0x7B, 0x77, 0x5C, 0xB5, 0xD8, 0xC2, 0x4A, 0x5A, 0x31, 0x4D, 0xEA, 0x55, 0x20, 0x51, 0x3B, 0x62, 0x24, 0x8E, 0x0F, 0x5E, 0x05, 0xBF, 0xFA, 0x0B, 0xF2, 0x93, 0x0A, 0xAD, 0xAF, 0x56, 0x35, 0x9F, 0x33, 0xAB, 0x01, 0x1F, 0x53, 0x4B })[..], "ChaCha20 encryption failed: mismatch on expected ciphertext.");
}


fn void test__decrypt_mut() @test
{
    // Test values. Note that the key is exactly 256 bits and the IV is exactly 12 bytes.
	char[] key = "this is a test key for chacha20.";
	char[] iv = "1234567890ab";

    char[] constant =
        "this is a stream of data which should be encrypted with chacha20."
        " It's not authenticated yet, but it works to hide valuable data cost-effectively.";

    // This input should decrypt to the expected plaintext above.
    char[] input_enc = { 0x38, 0xFD, 0x77, 0x63, 0x06, 0x79, 0x06, 0xF6, 0x44, 0x50, 0x9F, 0xE8, 0x7F, 0x2E, 0xFC, 0x91, 0x68, 0xA9, 0x23, 0x44, 0xDC, 0x33, 0x72, 0x0F, 0x07, 0x97, 0x18, 0x1B, 0x1B, 0x01, 0xE9, 0x35, 0xB9, 0x0C, 0x23, 0x09, 0x68, 0x18, 0x76, 0x80, 0xF7, 0xB5, 0xE1, 0x49, 0x6B, 0x67, 0x56, 0x55, 0xEE, 0x29, 0x3F, 0x62, 0xF7, 0xCC, 0xEE, 0xAA, 0x4D, 0xC7, 0x10, 0x64, 0x9F, 0xAB, 0x06, 0x6E, 0xF4, 0x89, 0x44, 0xF1, 0x37, 0x9E, 0x03, 0x65, 0xCF, 0x41, 0x32, 0x51, 0x2B, 0x53, 0x7B, 0xBB, 0x04, 0x70, 0x4B, 0x40, 0x8B, 0x82, 0xF9, 0xBF, 0xCE, 0xE5, 0x5E, 0xF0, 0x0C, 0x68, 0x90, 0xA3, 0x54, 0x79, 0xD3, 0xF8, 0x3E, 0x79, 0xB8, 0x27, 0x4A, 0x8E, 0x21, 0x74, 0x7B, 0x77, 0x5C, 0xB5, 0xD8, 0xC2, 0x4A, 0x5A, 0x31, 0x4D, 0xEA, 0x55, 0x20, 0x51, 0x3B, 0x62, 0x24, 0x8E, 0x0F, 0x5E, 0x05, 0xBF, 0xFA, 0x0B, 0xF2, 0x93, 0x0A, 0xAD, 0xAF, 0x56, 0x35, 0x9F, 0x33, 0xAB, 0x01, 0x1F, 0x53, 0x4B };

    decrypt_mut(input_enc, key, iv)!!;
	test::@check(input_enc == constant, "ChaCha20 decryption failed: mismatch on expected plaintext.");

    // Replaced the first 4 bytes (uint) with 0. This should still decrypt, but must fail.
    char[] bad_input_enc = { 0, 0, 0, 0, 0x06, 0x79, 0x06, 0xF6, 0x44, 0x50, 0x9F, 0xE8, 0x7F, 0x2E, 0xFC, 0x91, 0x68, 0xA9, 0x23, 0x44, 0xDC, 0x33, 0x72, 0x0F, 0x07, 0x97, 0x18, 0x1B, 0x1B, 0x01, 0xE9, 0x35, 0xB9, 0x0C, 0x23, 0x09, 0x68, 0x18, 0x76, 0x80, 0xF7, 0xB5, 0xE1, 0x49, 0x6B, 0x67, 0x56, 0x55, 0xEE, 0x29, 0x3F, 0x62, 0xF7, 0xCC, 0xEE, 0xAA, 0x4D, 0xC7, 0x10, 0x64, 0x9F, 0xAB, 0x06, 0x6E, 0xF4, 0x89, 0x44, 0xF1, 0x37, 0x9E, 0x03, 0x65, 0xCF, 0x41, 0x32, 0x51, 0x2B, 0x53, 0x7B, 0xBB, 0x04, 0x70, 0x4B, 0x40, 0x8B, 0x82, 0xF9, 0xBF, 0xCE, 0xE5, 0x5E, 0xF0, 0x0C, 0x68, 0x90, 0xA3, 0x54, 0x79, 0xD3, 0xF8, 0x3E, 0x79, 0xB8, 0x27, 0x4A, 0x8E, 0x21, 0x74, 0x7B, 0x77, 0x5C, 0xB5, 0xD8, 0xC2, 0x4A, 0x5A, 0x31, 0x4D, 0xEA, 0x55, 0x20, 0x51, 0x3B, 0x62, 0x24, 0x8E, 0x0F, 0x5E, 0x05, 0xBF, 0xFA, 0x0B, 0xF2, 0x93, 0x0A, 0xAD, 0xAF, 0x56, 0x35, 0x9F, 0x33, 0xAB, 0x01, 0x1F, 0x53, 0x4B };

    decrypt_mut(bad_input_enc, key, iv)!!;
    test::@check(bad_input_enc != constant, "ChaCha20 decryption succeeded when it should not have.");
}


fn void test__rfc8439_apx_1__vector1() @test
{
	char[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	uint counter = 0;
	char[64] arr = {};

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(arr[..]);

	uint[] expected_state = {
		0xade0b876, 0x903df1a0, 0xe56a5d40, 0x28bd8653,
        0xb819d2bd, 0x1aed8da0, 0xccef36a8, 0xc70d778b,
        0x7c5941da, 0x8d485751, 0x3fe02477, 0x374ad8b8,
        0xf4b8436a, 0x1ca11815, 0x69b687c3, 0x8665eeb2,
	};
	test::@check(c.key_stream[..] == expected_state, "Expected ChaCha20 state mismatch.");
}


fn void test__rfc8439_apx_1__vector2() @test
{
	char[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	uint counter = 1;
	char[64] arr = {};

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(arr[..]);

	uint[] expected_state = {
		0xbee7079f, 0x7a385155, 0x7c97ba98, 0x0d082d73,
        0xa0290fcb, 0x6965e348, 0x3e53c612, 0xed7aee32,
        0x7621b729, 0x434ee69c, 0xb03371d5, 0xd539d874,
        0x281fed31, 0x45fb0a51, 0x1f0ae1ac, 0x6f4d794b,
	};
	test::@check(c.key_stream[..] == expected_state, "Expected ChaCha20 state mismatch.");
}


fn void test__rfc8439_apx_1__vector3() @test
{
	char[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	uint counter = 1;
	char[64] arr = {};

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(arr[..]);

	uint[] expected_state = {
		0x2452eb3a, 0x9249f8ec, 0x8d829d9b, 0xddd4ceb1,
        0xe8252083, 0x60818b01, 0xf38422b8, 0x5aaa49c9,
        0xbb00ca8e, 0xda3ba7b4, 0xc4b592d1, 0xfdf2732f,
        0x4436274e, 0x2561b3c8, 0xebdd4aa6, 0xa0136c00,
	};
	test::@check(c.key_stream[..] == expected_state, "Expected ChaCha20 state mismatch.");
}


fn void test__rfc8439_apx_1__vector4() @test
{
	char[] key = { 0, 0xFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	uint counter = 2;
	char[64] arr = {};

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(arr[..]);

	uint[] expected_state = {
		0xfb4dd572, 0x4bc42ef1, 0xdf922636, 0x327f1394,
        0xa78dea8f, 0x5e269039, 0xa1bebbc1, 0xcaf09aae,
        0xa25ab213, 0x48a6b46c, 0x1b9d9bcb, 0x092c5be6,
        0x546ca624, 0x1bec45d5, 0x87f47473, 0x96f0992e,
	};
	test::@check(c.key_stream[..] == expected_state, "Expected ChaCha20 state mismatch.");
}


fn void test__rfc8439_apx_1__vector5() @test
{
	char[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 };
	uint counter = 0;
	char[64] arr = {};

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(arr[..]);

	uint[] expected_state = {
		0x374dc6c2, 0x3736d58c, 0xb904e24a, 0xcd3f93ef,
        0x88228b1a, 0x96a4dfb3, 0x5b76ab72, 0xc727ee54,
        0x0e0e978a, 0xf3145c95, 0x1b748ea8, 0xf786c297,
        0x99c28f5f, 0x628314e8, 0x398a19fa, 0x6ded1b53,
	};
	test::@check(c.key_stream[..] == expected_state, "Expected ChaCha20 state mismatch.");
}


fn void test__rfc8439_apx_2__vector1() @test
{
	char[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	uint counter = 0;

	char[64] plaintext = {};

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(plaintext[..]);

	char[] expected_ciphertext = {
		0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28,
		0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7,
		0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d, 0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37,
		0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
	};
	test::@check(plaintext[..] == expected_ciphertext, "Expected ChaCha20 ciphertext mismatch.");
}


fn void test__rfc8439_apx_2__vector2() @test
{
	char[] key = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 };
	uint counter = 1;

	char[] plaintext_const =
		`Any submission to the IETF intended by the Contributor for publication as all or part of an `
		`IETF Internet-Draft or RFC and any statement made within the context of an IETF activity is `
		`considered an "IETF Contribution". Such statements include oral statements in IETF sessions, `
		`as well as written and electronic communications made at any time or place, which are addressed to`;
	char[] plaintext = libc::strdup((ZString)plaintext_const.ptr)[:plaintext_const.len];

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(plaintext);

	char[] expected_ciphertext = {
		0xa3, 0xfb, 0xf0, 0x7d, 0xf3, 0xfa, 0x2f, 0xde, 0x4f, 0x37, 0x6c, 0xa2, 0x3e, 0x82, 0x73, 0x70,
		0x41, 0x60, 0x5d, 0x9f, 0x4f, 0x4f, 0x57, 0xbd, 0x8c, 0xff, 0x2c, 0x1d, 0x4b, 0x79, 0x55, 0xec,
		0x2a, 0x97, 0x94, 0x8b, 0xd3, 0x72, 0x29, 0x15, 0xc8, 0xf3, 0xd3, 0x37, 0xf7, 0xd3, 0x70, 0x05,
		0x0e, 0x9e, 0x96, 0xd6, 0x47, 0xb7, 0xc3, 0x9f, 0x56, 0xe0, 0x31, 0xca, 0x5e, 0xb6, 0x25, 0x0d,
		0x40, 0x42, 0xe0, 0x27, 0x85, 0xec, 0xec, 0xfa, 0x4b, 0x4b, 0xb5, 0xe8, 0xea, 0xd0, 0x44, 0x0e,
		0x20, 0xb6, 0xe8, 0xdb, 0x09, 0xd8, 0x81, 0xa7, 0xc6, 0x13, 0x2f, 0x42, 0x0e, 0x52, 0x79, 0x50,
		0x42, 0xbd, 0xfa, 0x77, 0x73, 0xd8, 0xa9, 0x05, 0x14, 0x47, 0xb3, 0x29, 0x1c, 0xe1, 0x41, 0x1c,
		0x68, 0x04, 0x65, 0x55, 0x2a, 0xa6, 0xc4, 0x05, 0xb7, 0x76, 0x4d, 0x5e, 0x87, 0xbe, 0xa8, 0x5a,
		0xd0, 0x0f, 0x84, 0x49, 0xed, 0x8f, 0x72, 0xd0, 0xd6, 0x62, 0xab, 0x05, 0x26, 0x91, 0xca, 0x66,
		0x42, 0x4b, 0xc8, 0x6d, 0x2d, 0xf8, 0x0e, 0xa4, 0x1f, 0x43, 0xab, 0xf9, 0x37, 0xd3, 0x25, 0x9d,
		0xc4, 0xb2, 0xd0, 0xdf, 0xb4, 0x8a, 0x6c, 0x91, 0x39, 0xdd, 0xd7, 0xf7, 0x69, 0x66, 0xe9, 0x28,
		0xe6, 0x35, 0x55, 0x3b, 0xa7, 0x6c, 0x5c, 0x87, 0x9d, 0x7b, 0x35, 0xd4, 0x9e, 0xb2, 0xe6, 0x2b,
		0x08, 0x71, 0xcd, 0xac, 0x63, 0x89, 0x39, 0xe2, 0x5e, 0x8a, 0x1e, 0x0e, 0xf9, 0xd5, 0x28, 0x0f,
		0xa8, 0xca, 0x32, 0x8b, 0x35, 0x1c, 0x3c, 0x76, 0x59, 0x89, 0xcb, 0xcf, 0x3d, 0xaa, 0x8b, 0x6c,
		0xcc, 0x3a, 0xaf, 0x9f, 0x39, 0x79, 0xc9, 0x2b, 0x37, 0x20, 0xfc, 0x88, 0xdc, 0x95, 0xed, 0x84,
		0xa1, 0xbe, 0x05, 0x9c, 0x64, 0x99, 0xb9, 0xfd, 0xa2, 0x36, 0xe7, 0xe8, 0x18, 0xb0, 0x4b, 0x0b,
		0xc3, 0x9c, 0x1e, 0x87, 0x6b, 0x19, 0x3b, 0xfe, 0x55, 0x69, 0x75, 0x3f, 0x88, 0x12, 0x8c, 0xc0,
		0x8a, 0xaa, 0x9b, 0x63, 0xd1, 0xa1, 0x6f, 0x80, 0xef, 0x25, 0x54, 0xd7, 0x18, 0x9c, 0x41, 0x1f,
		0x58, 0x69, 0xca, 0x52, 0xc5, 0xb8, 0x3f, 0xa3, 0x6f, 0xf2, 0x16, 0xb9, 0xc1, 0xd3, 0x00, 0x62,
		0xbe, 0xbc, 0xfd, 0x2d, 0xc5, 0xbc, 0xe0, 0x91, 0x19, 0x34, 0xfd, 0xa7, 0x9a, 0x86, 0xf6, 0xe6,
		0x98, 0xce, 0xd7, 0x59, 0xc3, 0xff, 0x9b, 0x64, 0x77, 0x33, 0x8f, 0x3d, 0xa4, 0xf9, 0xcd, 0x85,
		0x14, 0xea, 0x99, 0x82, 0xcc, 0xaf, 0xb3, 0x41, 0xb2, 0x38, 0x4d, 0xd9, 0x02, 0xf3, 0xd1, 0xab,
		0x7a, 0xc6, 0x1d, 0xd2, 0x9c, 0x6f, 0x21, 0xba, 0x5b, 0x86, 0x2f, 0x37, 0x30, 0xe3, 0x7c, 0xfd,
		0xc4, 0xfd, 0x80, 0x6c, 0x22, 0xf2, 0x21  
	};
	test::@check(plaintext == expected_ciphertext, "Expected ChaCha20 ciphertext mismatch.");
}


fn void test__rfc8439_apx_2__vector3() @test
{
	char[] key = {
		0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, 0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
		0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, 0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,
	};
	char[] nonce = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 };
	uint counter = 42;

	char[] plaintext_const =
		"'Twas brillig, and the slithy toves\nDid gyre and gimble in the wabe:\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.";
	char[] plaintext = libc::strdup((ZString)plaintext_const.ptr)[:plaintext_const.len];

	ChaCha20 c @noinit;
	c.init(key, nonce, counter);
	c.xor(plaintext[..]);

	char[] expected_ciphertext = {
		0x62, 0xe6, 0x34, 0x7f, 0x95, 0xed, 0x87, 0xa4, 0x5f, 0xfa, 0xe7, 0x42, 0x6f, 0x27, 0xa1, 0xdf,
		0x5f, 0xb6, 0x91, 0x10, 0x04, 0x4c, 0x0d, 0x73, 0x11, 0x8e, 0xff, 0xa9, 0x5b, 0x01, 0xe5, 0xcf,
		0x16, 0x6d, 0x3d, 0xf2, 0xd7, 0x21, 0xca, 0xf9, 0xb2, 0x1e, 0x5f, 0xb1, 0x4c, 0x61, 0x68, 0x71,
		0xfd, 0x84, 0xc5, 0x4f, 0x9d, 0x65, 0xb2, 0x83, 0x19, 0x6c, 0x7f, 0xe4, 0xf6, 0x05, 0x53, 0xeb,
		0xf3, 0x9c, 0x64, 0x02, 0xc4, 0x22, 0x34, 0xe3, 0x2a, 0x35, 0x6b, 0x3e, 0x76, 0x43, 0x12, 0xa6,
		0x1a, 0x55, 0x32, 0x05, 0x57, 0x16, 0xea, 0xd6, 0x96, 0x25, 0x68, 0xf8, 0x7d, 0x3f, 0x3f, 0x77,
		0x04, 0xc6, 0xa8, 0xd1, 0xbc, 0xd1, 0xbf, 0x4d, 0x50, 0xd6, 0x15, 0x4b, 0x6d, 0xa7, 0x31, 0xb1,
		0x87, 0xb5, 0x8d, 0xfd, 0x72, 0x8a, 0xfa, 0x36, 0x75, 0x7a, 0x79, 0x7a, 0xc1, 0x88, 0xd1
	};
	test::@check(plaintext[..] == expected_ciphertext, "Expected ChaCha20 ciphertext mismatch.");
}
